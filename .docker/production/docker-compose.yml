version: '3'
services:

  database:
    image: postgres:13
    restart: unless-stopped
    container_name: users-database
    command:
      [
        "postgres",
        "-c",
        "log_statement=all",
        "-c",
        "log_destination=stderr",
        "-p",
        "${DB_PORT}"
      ]
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      TZ: ${TIMEZONE}
      PGTZ: ${TIMEZONE}
    volumes:
      - ~/.volumes/users/database/postgresql:/var/lib/postgresql/data
    networks:
      - users-network
    tty: true

  gateway:
    build:
      context: ../nginx
      dockerfile: Dockerfile
    image: throyer/users-api-gateway/dev:latest
    container_name: users-api-gateway
    ports:
      - "${API_PORT}:80"
    links:
      - api
    environment:
      PROXY_PASS_URL: "http://api"
      PROXY_REQUESTS_PER_SECOND_LIMIT: ${RATE_LIMIT_MAX_REQUESTS_PER_SECOND}
      PROXY_BURST: 5
    command: [
      "dockerize",
      "-wait",
      "http://api",
      "-timeout",
      "20s",
      "./entry.sh"
    ]
    networks:
      - users-network

  api:
    build:
      context: ../../server
      dockerfile: ../.docker/develop/Dockerfile
    image: throyer/users-api/dev:latest
    container_name: users-api
    links:
      - database
    ports:
      - "${API_DEBUG_PORT}:${API_DEBUG_PORT}"
    volumes:
      - ../../server:/app
      - ~/.m2:/root/.m2
    working_dir: /app
    networks:
      - users-network
    tty: true
    environment:
      TZ: "${TIMEZONE}"
      SERVER_PORT: 80
    env_file: "../.env"
    entrypoint: [
      "dockerize",
      "-wait",
      "tcp://database:${DB_PORT}",
      "-timeout",
      "20s",
      'mvn',
      'spring-boot:run',
      '-Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,address=*:${API_DEBUG_PORT},suspend=n"'
    ]

networks:
  users-network:
    driver: bridge
    name: users